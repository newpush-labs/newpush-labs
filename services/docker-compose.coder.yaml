services:
  coder_create_admin:
    image: ghcr.io/coder/coder:${CODER_VERSION:-latest}
    container_name: coder_create_admin
    environment:
      - CODER_PG_CONNECTION_URL=postgresql://${POSTGRES_USER:-username}:${POSTGRES_PASSWORD:-password}@database/${POSTGRES_DB:-coder}?sslmode=disable 
      - CODER_HTTP_ADDRESS=0.0.0.0:7080
      - CODER_ACCESS_URL=${CODER_ACCESS_URL}
      - CODER_EMAIL=admin@example.com
      - CODER_USERNAME=admin
      - CODER_PASSWORD=hacker
    group_add:
     - "994" # docker group on host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      database:
        condition: service_healthy
    networks:
      - web
      - database
    command: ["create-admin-user"]

  coder:
    image: ghcr.io/coder/coder:${CODER_VERSION:-latest}
    ports:
      - "7080:7080"
    container_name: coder
    environment:
      - CODER_PG_CONNECTION_URL=postgresql://${POSTGRES_USER:-username}:${POSTGRES_PASSWORD:-password}@database/${POSTGRES_DB:-coder}?sslmode=disable 
      - CODER_HTTP_ADDRESS=0.0.0.0:7080
      - CODER_ACCESS_URL=${CODER_ACCESS_URL}
      - CODER_OIDC_ISSUER_URL=https://auth.${DOMAIN}
      - CODER_OIDC_EMAIL_DOMAIN=newpush.com,gmail.com,example.com
      - CODER_OIDC_CLIENT_ID=5e7c01af6d262109e111
      - CODER_OIDC_CLIENT_SECRET=4d6ca43445dfa085c8b716aa8e20835dbe7532e7
      - CODER_OIDC_IGNORE_EMAIL_VERIFIED=true
      - CODER_OIDC_SIGN_IN_TEXT=Sign in with NewPush Labs
      # - CODER_DISABLE_PASSWORD_AUTH=true

    # If the coder user does not have write permissions on
    # the docker socket, you can uncomment the following
    # lines and set the group ID to one that has write
    # permissions on the docker socket. 
    # getent group docker | cut -d: -f3
    group_add:
     - "994" # docker group on host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      database:
        condition: service_healthy
    labels:
      - "com.centurylinklabs.watchtower.enable"
      - "traefik.enable=true"
      - "traefik.http.routers.coder.rule=Host(`coder.${DOMAIN}`)"
      - "traefik.http.routers.coder.entrypoints=https"
      - "traefik.http.services.coder.loadbalancer.server.port=7080"
      - "traefik.http.routers.coder.service=coder"
      - "traefik.http.routers.coder.tls=true"
      - "traefik.http.routers.coder.tls.certresolver=default"
      - "mafl.enable=true"
      - "mafl.title=Coder"
      - "mafl.description=Provision remote development environments"
      - "mafl.tag=Software Development"
      - "mafl.group=Development"
      - "mafl.link=https://coder.${DOMAIN}"
      - "mafl.icon.name=simple-icons:coder"
      - "mafl.icon.wrap=true"
      - "mafl.icon.color=#ffffff"
      - "mafl.status.enabled=true"
      - "mafl.status.interval=60"
    networks:
      - web
      - database
  database:
    # Minimum supported version is 13.
    # More versions here: https://hub.docker.com/_/postgres
    image: "postgres:16"
    # ports:
    #   - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-username} # The PostgreSQL user (useful to connect to the database)
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password} # The PostgreSQL password (useful to connect to the database)
      POSTGRES_DB: ${POSTGRES_DB:-coder} # The PostgreSQL default database (automatically created at first launch)
    volumes:
      - coder_data:/var/lib/postgresql/data # Use "docker volume rm coder_coder_data" to reset Coder
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-username} -d ${POSTGRES_DB:-coder}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - database
volumes:
  coder_data:


networks:
  web:
    external: True
  database:
    driver: bridge
